pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'malikdrote/sample-html-image'
        DOCKER_TAG_FILE = 'version.txt'
        REGISTRY_CREDENTIALS = 'docker-hub-credentials'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/MALIKROTE/jenkins-pipeline.git', credentialsId: 'github-token'
            }
        }
        stage('Increment Version') {
            steps {
                script {
                    sh './increment_version.sh'
                    // Read the new version from the file
                    def newVersion = readFile(DOCKER_TAG_FILE).trim()
                    env.DOCKER_TAG = newVersion
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh """
                            echo $PASSWORD | docker login -u $USERNAME --password-stdin
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }

        stage('Deploy Docker Image') {
            steps {
                script {
                    echo 'Deploying Docker container...'
                    sh """
                        docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
                        docker stop my_container || true
                        docker rm my_container || true
                        docker run -dp 127.0.0.1:8092:80 --name my_container ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }

        stage('Check Running Container') {
            steps {
                script {
                    echo 'Listing running Docker containers...'
                    sh 'docker ps -a'
                }
            }
        }
    }

    post {
        success {
            echo 'Docker image built and pushed successfully!'
        }
        failure {
            echo 'Failed to build and push Docker image.'
            script {
                sh """
                    docker stop my_container || true
                    docker rm my_container || true
                """
            }
        }
    }
}
