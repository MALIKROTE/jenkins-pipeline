pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'malikdrote/sample-html-image'
        REGISTRY_CREDENTIALS = 'docker-hub-credentials'
        GIT_CREDENTIALS = 'github-pat' // GitHub Personal Access Token
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the Git repository
                git branch: 'main', url: 'https://github.com/MALIKROTE/jenkins-pipeline.git', credentialsId: "${GIT_CREDENTIALS}"
            }
        }

        stage('Increment Version') {
            steps {
                script {
                    // Increment the version and read the new version
                    sh './increment_version.sh'
                    def newVersion = readFile('version.txt').trim()
                    env.DOCKER_TAG = newVersion
                }
            }
        }

        stage('Commit Version Update') {
            steps {
                script {
                    withCredentials([string(credentialsId: "${GIT_CREDENTIALS}", variable: 'GITHUB_TOKEN')]) {
                        // Commit and push the updated version file
                        sh '''
                            git config user.name "Jenkins"
                            git config user.email "jenkins@example.com"
                            git add version.txt
                            git commit -m "Update version to ${DOCKER_TAG}"
                            echo $GITHUB_TOKEN | git push https://github.com/MALIKROTE/jenkins-pipeline.git main
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image with the new tag
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        // Login and push the Docker image
                        sh """
                            echo $PASSWORD | docker login -u $USERNAME --password-stdin
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }

        stage('Pull Docker Image') {
            steps {
                script {
                    // Pull the Docker image to ensure it is available
                    sh "docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Run the Docker container
                    sh "docker run --name my_container -d ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }

        stage('Check Running Container') {
            steps {
                script {
                    // List all Docker containers
                    sh 'docker ps -a'
                }
            }
        }

        stage('Stop Docker Container') {
            steps {
                script {
                    // Stop the Docker container
                    sh 'docker stop my_container'
                }
            }
        }

        stage('Remove Docker Container') {
            steps {
                script {
                    // Remove the Docker container
                    sh 'docker rm my_container'
                }
            }
        }

        stage('Deploy Docker Image') {
            steps {
                script {
                    // Deploy the Docker image
                    sh """
                        docker run -dp 127.0.0.1:8092:80 --name my_container ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Docker image built and pushed successfully!'
        }
        failure {
            echo 'Failed to build and push Docker image.'
        }
    }
}
